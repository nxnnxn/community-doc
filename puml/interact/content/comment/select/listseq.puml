@startuml
!include <C4/C4_Sequence>
SHOW_INDEX()
SHOW_LEGEND()

Person(user, "用户")
System(gateway,"网关系统")

Rel(user, gateway, "请求")
Rel(gateway, gateway, "用户身份验证")

Container_Boundary(relationFacade, "关系应用")
    Component(checkComponent, "校验组件", "component", "IP校验&安全检验")
    Component(authComponent, "权限组件", "component", "用户权限检验")
Boundary_End()

Container_Boundary(relationService, "关系服务")
    Component(relationComponent, "关系组件", "component", "关系关注")
    Component(statComponent, "计数器组件", "component", "计数器更新")
Boundary_End()
System(security,"风控系统")
System(userSystem,"用户系统")
System(videoSystem,"视频系统")
System(rocketmq,"MQ")
ComponentDb(db, "数据库", "表格数据库")
ComponentDb(redis, "缓存", "redis")

Rel(gateway, checkComponent, "发起请求")

Rel(checkComponent, security, "获取规则")
Rel(security,checkComponent, "IP校验&安全检验")

Rel(checkComponent, authComponent, "权限控制")
Rel(authComponent, userSystem, "用户信息获取")
Rel(userSystem,authComponent, "实名认证&权限获取")

alt 若对象是视频
Rel(authComponent, videoSystem, "视频信息获取")
Rel(videoSystem,authComponent, "视频信息&权限判断")
end

Rel(authComponent, relationComponent, "发起请求")
Rel(relationComponent, db, "查询信息")
Rel(db, relationComponent, "返回")
alt 新增信息
alt 若信息不存在
Rel(relationComponent, db, "插入DB")
end
else 删除信息
alt 若信息存在
Rel(relationComponent,db , "删除DB")
end
end
Rel(db, relationComponent, "返回")


Rel(relationComponent, authComponent, "返回")
Rel(authComponent, gateway, "返回")
Rel(gateway, user, "返回")

== 计数器更新 ==
Rel(rocketmq, statComponent, "监听到变更")
alt redis10分钟幂等校验通过
Rel(statComponent, statComponent, "统计策略选择")
alt 接入类型没有详情
  Rel(statComponent, db, "对相关列进行+-")
else 有detail&小于10000&上次count时间小于特定值
  Rel(statComponent, db, "对相关列进行+-")
else  有detail&&小于10000&上次count时间大与特定值
  Rel(statComponent, db, "对数据调用详情数据进行count")
else 其他
   Rel(statComponent, db, "对相关列进行+-")
end
Rel(db, statComponent, "数据库返回")
end
Rel(statComponent, rocketmq, "完成更新")

== 计数器缓存更新 ==
Rel(rocketmq, statComponent, "监听到变更")
alt redis10分钟幂等校验通过
Rel(statComponent, statComponent, "更新策略选择")
alt 统计数小于10000
  Rel(statComponent, redis, "每列变化都主动更新缓存")
else 统计数>10000
  Rel(statComponent, redis, "每取模1000在0-100上次更新一次")
else  其他列更新
  Rel(statComponent, redis, "对库里所有数据更新一次")
end
Rel(redis, statComponent, "数据库返回")
end
Rel(statComponent, rocketmq, "完成更新")
== 详情缓存更新 ==
Rel(rocketmq, relationComponent, "监听到变更")
Rel(relationComponent, redis, "更新布隆过滤器")
Rel(redis, relationComponent, "返回")
SHOW_LEGEND()
@enduml
